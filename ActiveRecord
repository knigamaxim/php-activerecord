class ActiveRecord
{

     protected static $table = '';

	protected $extraFields = [];

	public function __get($k)
	{
		return $this->$k ?? $this->extraFields[$k];
	}

	public function __set($k, $v)
	{
		if(!property_exists($this, $k)) {
			$this->extraFields[$k] = $v;
		} else {
			$this->$k = $v;
		}
		
	}

	public function __isset($v)
	{
		return isset($this->$v);
	}

protected function insert()
{
	$columns = [];
	$values = [];
	foreach ($this as $k => $v) {
		if($k == 'id' || $k == 'extraFields') continue;
		$columns[] = $k;
		$values[':'.$k] = $v;
	}	
	$sql = 'INSERT INTO ' . static::TABLE . 
		'('. implode(', ', $columns) .') values('
		. implode(', ', array_keys($values)) . ')';
	$db = new Db;
	return $db->execute($sql, $values);
}
  
    protected function update()
    {
        $columns = [];
        $values = [];
        foreach ($this->data as $k => $v) {
            if ('id' == $k) {
                continue;
            }
            $columns[] = $k;
            $values[':'.$k] = $this->data[$k];
            $setParams .= $k.'=:'.$k.', ';
        }
        $setParams = trim($setParams, ', ');
        $sql = 'UPDATE ' . static::$table . '
               SET ' . $setParams . 
               ' WHERE id=:id';
        $values['id'] = $this->id;
        $db = Db::instance();
        if($db->execute($sql, $values)) return true;
        return false;
    }


	protected function isNew()
	{
		return empty($this->id);
	}
	
	public function beforeSave(){}

	public function afterSave(){}	

	public function save()
	{
		$this->beforeSave();
		$method = $this->isNew() ? 'insert' : 'update';
		$res = $this->$method();
		$this->afterSave();
		return $res;
	}

    public static function findOne($id)
    {
        $db = Db::instance();
        return $db->query(
            'SELECT * FROM ' . static::$table . ' WHERE id=:id',
            [':id' => $id], 
            static::class
        )[0];
    }

	public static function findAll()
	{
		$db = new Db;
		return $db->query(
			'SELECT * FROM ' . static::TABLE, 
			[], 
			static::class
		);

	}

    public static function getCnt()
    {
        $db = Db::instance();
        return $db->query(
            'SELECT COUNT(*) as `cnt` FROM ' . static::$table, [],
            static::class
        )[0]->cnt;
    }

    public static function load(array $arr)
    {
        $model = new static;
        foreach ($arr as $k => $v) {
            $model->data[$k] = $v;
            $model->$k = $v;
        }
        return $model;
    }	

}
